package com.tweet.controller;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.tweet.helperClass.Login;
import com.tweet.helperClass.RegisterHelperClass;
import com.tweet.helperClass.ResponseHelper;
import com.tweet.model.TweetsDetails;

@RestController
@RequestMapping(value = "/api/v1.0/tweets")
public class HomeController {

	@Autowired
	MongoTemplate mongoTemplate;

	@PostMapping(value = "/register")
	public RegisterHelperClass Register(@RequestBody RegisterHelperClass registerHelperClass) {
		System.out.println(registerHelperClass.toString());
		RegisterHelperClass save = mongoTemplate.save(registerHelperClass, "RegistrationDetails");
		return registerHelperClass;
	}

	@PostMapping(value = "/login")
	public RegisterHelperClass Register(@RequestBody Login login) {
		System.out.println(login.toString());
		RegisterHelperClass findById = mongoTemplate.findById(login.getEmail(), RegisterHelperClass.class);
		Optional<RegisterHelperClass> of = Optional.ofNullable(findById);
		System.out.println(of.isPresent() + "is present");
		System.out.println();
		return findById;
	}

	@GetMapping(value = "/all")
	public List<TweetsDetails> getAllTweets() {

		Query query = new Query();
		query.addCriteria(Criteria.where("status").is(0));
		// query.fields().i

		List<TweetsDetails> find = mongoTemplate.find(query, TweetsDetails.class);
		return find;

	}

	@PostMapping(value = "/addTweet")
	public String postTweet(@RequestBody TweetsDetails details) {
		System.out.println(details.toString());
		if (details.getMessage().length() > 144) {
			return "tweetLimitCrossed";
		} else {
			details.setStatus(0);
			details.setTweetdate(LocalDateTime.now());
			details.setUserEmail("2042954@cognizant.com");
			// details.set
			TweetsDetails save = mongoTemplate.save(details);
			return save.toString();
		}

	}

	@GetMapping(value = "/allUsers")
	public List<RegisterHelperClass> allUsers() {
		Query query = new Query();
		query.fields().exclude("password");

		List<RegisterHelperClass> find = mongoTemplate.find(query, RegisterHelperClass.class);
		return find;

	}
	
	@PatchMapping(value = "/updateTweet/{tweetid}")
	public String updateTweet(@PathVariable(name="tweetid") String tweetid,@RequestBody TweetsDetails details) {
		
		ResponseHelper res=new ResponseHelper(false, null);
		 TweetsDetails findById = mongoTemplate.findById(tweetid, TweetsDetails.class);
		 Optional<TweetsDetails> ofNullable = Optional.ofNullable(findById);
		 if(ofNullable.isPresent())
		 {
			 TweetsDetails tweetsDetails = ofNullable.get();
			 tweetsDetails.setMessage(details.getMessage());
			 TweetsDetails save = mongoTemplate.save(tweetsDetails);
			 
			 return save.toString();
			 
			 
		 }else
		 {
			 return "enter proper tweetid";
		 }
	

	}

}
