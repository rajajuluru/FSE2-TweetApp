package com.juluru.JWT;

import java.io.IOException;
import java.time.LocalDate;
import java.util.Date;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.fasterxml.jackson.databind.ObjectMapper;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;

public class JwtUsernameAndPasswordAuthenticationFilter extends UsernamePasswordAuthenticationFilter {
	
	private  AuthenticationManager manager;
	@Override
	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
			throws AuthenticationException {
		// TODO Auto-generated method stub
	
		UserNameAndPasswordAuthenticationRequest UserNameAndPassword =null;
		request.getHeader("");
		try {
			 UserNameAndPassword = new ObjectMapper().readValue(request.getInputStream(), UserNameAndPasswordAuthenticationRequest.class);
			 Authentication authentication=new UsernamePasswordAuthenticationToken(UserNameAndPassword.getUserName(), UserNameAndPassword.getPassword());
			Authentication authenticate = manager.authenticate(authentication);
			return authenticate;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			//return null;
			throw new RuntimeException();
		}
		//return super.attemptAuthentication(request, response);
		
	}
	
	@Override
	protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,
			Authentication authResult) throws IOException, ServletException {
		// TODO Auto-generated method stub
		String compact = Jwts.builder().setSubject(authResult.getName())
		.claim("role", authResult.getAuthorities())
		.setIssuedAt(new Date())
		.setExpiration(java.sql.Date.valueOf(LocalDate.now().plusWeeks(2)))
		.signWith(Keys.hmacShaKeyFor(new String("secret").getBytes()))
		.compact();
		response.addHeader("Authorization", compact);
		//super.successfulAuthentication(request, response, chain, authResult);
	}

}
