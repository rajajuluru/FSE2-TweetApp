package com.juluru.security;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;

@Configuration
@EnableWebSecurity
public class ApplicationSercurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private PasswordEncoder passwordEncoder;
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		// TODO Auto-generated method stub
		// super.configure(http);
		http.authorizeRequests()
		.antMatchers("index", "/css/*", "/javascript/*").permitAll()
		.antMatchers("/hello")
		.hasAnyRole(ApplicationUserRole.STUDENT.name())
		.anyRequest()
				.authenticated().and().httpBasic();
	}

	@Override
	@Bean
	protected UserDetailsService userDetailsService() { // is how u retrieve
														// users from DB
		// TODO Auto-generated method stub
		// return super.userDetailsService();
		 List<SimpleGrantedAuthority> authorities = new ArrayList<>();
		 
		UserDetails raja = User.builder().username("raja")
				.password(passwordEncoder.encode("password")).roles(ApplicationUserRole.STUDENT.name()).build();
		
		UserDetails admin = User.builder().username("admin")
				.password(passwordEncoder.encode("admin")).roles(ApplicationUserRole.ADMIN.name()).authorities(authorities).build();
		
		UserDetails tom = User.builder().username("tom")
				.password(passwordEncoder.encode("tom")).roles(ApplicationUserRole.ADMINTRAINEE.name()).build();
		
		//.password("password").roles("admin").build();
		return new InMemoryUserDetailsManager(raja,admin,tom);
	}

}
